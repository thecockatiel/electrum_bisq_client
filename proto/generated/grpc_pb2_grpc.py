# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import grpc_pb2 as grpc__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in grpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DisputeAgentsStub(object):
    """
    The DisputeAgents service is provided for development only;  it can only be used when running in regtest mode.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDisputeAgent = channel.unary_unary(
                '/io.bisq.protobuffer.DisputeAgents/RegisterDisputeAgent',
                request_serializer=grpc__pb2.RegisterDisputeAgentRequest.SerializeToString,
                response_deserializer=grpc__pb2.RegisterDisputeAgentReply.FromString,
                _registered_method=True)


class DisputeAgentsServicer(object):
    """
    The DisputeAgents service is provided for development only;  it can only be used when running in regtest mode.
    """

    def RegisterDisputeAgent(self, request, context):
        """Register regtest / dev mode dispute agents.  Does not work when running on mainnet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DisputeAgentsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDisputeAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDisputeAgent,
                    request_deserializer=grpc__pb2.RegisterDisputeAgentRequest.FromString,
                    response_serializer=grpc__pb2.RegisterDisputeAgentReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.DisputeAgents', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.DisputeAgents', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DisputeAgents(object):
    """
    The DisputeAgents service is provided for development only;  it can only be used when running in regtest mode.
    """

    @staticmethod
    def RegisterDisputeAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.DisputeAgents/RegisterDisputeAgent',
            grpc__pb2.RegisterDisputeAgentRequest.SerializeToString,
            grpc__pb2.RegisterDisputeAgentReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HelpStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMethodHelp = channel.unary_unary(
                '/io.bisq.protobuffer.Help/GetMethodHelp',
                request_serializer=grpc__pb2.GetMethodHelpRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetMethodHelpReply.FromString,
                _registered_method=True)


class HelpServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMethodHelp(self, request, context):
        """Returns a CLI command man page.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HelpServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMethodHelp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMethodHelp,
                    request_deserializer=grpc__pb2.GetMethodHelpRequest.FromString,
                    response_serializer=grpc__pb2.GetMethodHelpReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.Help', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.Help', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Help(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMethodHelp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Help/GetMethodHelp',
            grpc__pb2.GetMethodHelpRequest.SerializeToString,
            grpc__pb2.GetMethodHelpReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OffersStub(object):
    """
    The Offers service provides rpc methods for creating, editing, listing, and cancelling Bisq offers.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOfferCategory = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetOfferCategory',
                request_serializer=grpc__pb2.GetOfferCategoryRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetOfferCategoryReply.FromString,
                _registered_method=True)
        self.GetBsqSwapOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetBsqSwapOffer',
                request_serializer=grpc__pb2.GetOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetBsqSwapOfferReply.FromString,
                _registered_method=True)
        self.GetOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetOffer',
                request_serializer=grpc__pb2.GetOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetOfferReply.FromString,
                _registered_method=True)
        self.GetMyBsqSwapOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetMyBsqSwapOffer',
                request_serializer=grpc__pb2.GetMyOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetMyBsqSwapOfferReply.FromString,
                _registered_method=True)
        self.GetMyOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetMyOffer',
                request_serializer=grpc__pb2.GetMyOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetMyOfferReply.FromString,
                _registered_method=True)
        self.GetBsqSwapOffers = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetBsqSwapOffers',
                request_serializer=grpc__pb2.GetBsqSwapOffersRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetBsqSwapOffersReply.FromString,
                _registered_method=True)
        self.GetOffers = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetOffers',
                request_serializer=grpc__pb2.GetOffersRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetOffersReply.FromString,
                _registered_method=True)
        self.GetMyBsqSwapOffers = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetMyBsqSwapOffers',
                request_serializer=grpc__pb2.GetBsqSwapOffersRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetMyBsqSwapOffersReply.FromString,
                _registered_method=True)
        self.GetMyOffers = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/GetMyOffers',
                request_serializer=grpc__pb2.GetMyOffersRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetMyOffersReply.FromString,
                _registered_method=True)
        self.CreateBsqSwapOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/CreateBsqSwapOffer',
                request_serializer=grpc__pb2.CreateBsqSwapOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.CreateBsqSwapOfferReply.FromString,
                _registered_method=True)
        self.CreateOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/CreateOffer',
                request_serializer=grpc__pb2.CreateOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.CreateOfferReply.FromString,
                _registered_method=True)
        self.EditOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/EditOffer',
                request_serializer=grpc__pb2.EditOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.EditOfferReply.FromString,
                _registered_method=True)
        self.CancelOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Offers/CancelOffer',
                request_serializer=grpc__pb2.CancelOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.CancelOfferReply.FromString,
                _registered_method=True)


class OffersServicer(object):
    """
    The Offers service provides rpc methods for creating, editing, listing, and cancelling Bisq offers.
    """

    def GetOfferCategory(self, request, context):
        """Get an offer's category, one of  FIAT, ALTCOIN, or BSQ_SWAP.  This information is needed before an offer
        can be taken, and is used by a client to determine what kind of offer to take:  a v1 FIAT or ALTCOIN offer,
        or a BSQ swap offer.  V1 and BSQ swap trades are handled differently in the API daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBsqSwapOffer(self, request, context):
        """Get the available BSQ swap offer with offer-id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOffer(self, request, context):
        """Get the v1 protocol offer with an offer-id.  Your node must have a payment account with the same
        payment method as the offer's associated payment method, e,g., ACH_TRANSFER, CASH_DEPOSIT, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyBsqSwapOffer(self, request, context):
        """Get user's BSQ swap offer with offer-id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyOffer(self, request, context):
        """Get my open v1 protocol offer with offer-id.  Deprecated since 27-Dec-2021 (v1.8.0).  Use GetOffer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBsqSwapOffers(self, request, context):
        """Get all available BSQ swap offers with a BUY (BTC) or SELL (BTC) direction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOffers(self, request, context):
        """Get all available v1 protocol offers with a BUY (BTC) or SELL (BTC) direction.  The returned offers
        are restricted to those associated with payment methods matching the payment methods you have set up
        on your node, e,g., NATIONAL_BANK, US_POSTAL_MONEY_ORDER, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyBsqSwapOffers(self, request, context):
        """Get all user's BSQ swap offers with a BUY (BTC) or SELL (BTC) direction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMyOffers(self, request, context):
        """Get all user's open v1 protocol offers with a BUY (BTC) or SELL (BTC) direction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBsqSwapOffer(self, request, context):
        """Create a BSQ swap offer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateOffer(self, request, context):
        """Create a v1 protocol offer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditOffer(self, request, context):
        """Edit an open offer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOffer(self, request, context):
        """Cancel an open offer;  remove it from the offer book.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OffersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOfferCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOfferCategory,
                    request_deserializer=grpc__pb2.GetOfferCategoryRequest.FromString,
                    response_serializer=grpc__pb2.GetOfferCategoryReply.SerializeToString,
            ),
            'GetBsqSwapOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBsqSwapOffer,
                    request_deserializer=grpc__pb2.GetOfferRequest.FromString,
                    response_serializer=grpc__pb2.GetBsqSwapOfferReply.SerializeToString,
            ),
            'GetOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOffer,
                    request_deserializer=grpc__pb2.GetOfferRequest.FromString,
                    response_serializer=grpc__pb2.GetOfferReply.SerializeToString,
            ),
            'GetMyBsqSwapOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyBsqSwapOffer,
                    request_deserializer=grpc__pb2.GetMyOfferRequest.FromString,
                    response_serializer=grpc__pb2.GetMyBsqSwapOfferReply.SerializeToString,
            ),
            'GetMyOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyOffer,
                    request_deserializer=grpc__pb2.GetMyOfferRequest.FromString,
                    response_serializer=grpc__pb2.GetMyOfferReply.SerializeToString,
            ),
            'GetBsqSwapOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBsqSwapOffers,
                    request_deserializer=grpc__pb2.GetBsqSwapOffersRequest.FromString,
                    response_serializer=grpc__pb2.GetBsqSwapOffersReply.SerializeToString,
            ),
            'GetOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOffers,
                    request_deserializer=grpc__pb2.GetOffersRequest.FromString,
                    response_serializer=grpc__pb2.GetOffersReply.SerializeToString,
            ),
            'GetMyBsqSwapOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyBsqSwapOffers,
                    request_deserializer=grpc__pb2.GetBsqSwapOffersRequest.FromString,
                    response_serializer=grpc__pb2.GetMyBsqSwapOffersReply.SerializeToString,
            ),
            'GetMyOffers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMyOffers,
                    request_deserializer=grpc__pb2.GetMyOffersRequest.FromString,
                    response_serializer=grpc__pb2.GetMyOffersReply.SerializeToString,
            ),
            'CreateBsqSwapOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBsqSwapOffer,
                    request_deserializer=grpc__pb2.CreateBsqSwapOfferRequest.FromString,
                    response_serializer=grpc__pb2.CreateBsqSwapOfferReply.SerializeToString,
            ),
            'CreateOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOffer,
                    request_deserializer=grpc__pb2.CreateOfferRequest.FromString,
                    response_serializer=grpc__pb2.CreateOfferReply.SerializeToString,
            ),
            'EditOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.EditOffer,
                    request_deserializer=grpc__pb2.EditOfferRequest.FromString,
                    response_serializer=grpc__pb2.EditOfferReply.SerializeToString,
            ),
            'CancelOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOffer,
                    request_deserializer=grpc__pb2.CancelOfferRequest.FromString,
                    response_serializer=grpc__pb2.CancelOfferReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.Offers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.Offers', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Offers(object):
    """
    The Offers service provides rpc methods for creating, editing, listing, and cancelling Bisq offers.
    """

    @staticmethod
    def GetOfferCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetOfferCategory',
            grpc__pb2.GetOfferCategoryRequest.SerializeToString,
            grpc__pb2.GetOfferCategoryReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBsqSwapOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetBsqSwapOffer',
            grpc__pb2.GetOfferRequest.SerializeToString,
            grpc__pb2.GetBsqSwapOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetOffer',
            grpc__pb2.GetOfferRequest.SerializeToString,
            grpc__pb2.GetOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyBsqSwapOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetMyBsqSwapOffer',
            grpc__pb2.GetMyOfferRequest.SerializeToString,
            grpc__pb2.GetMyBsqSwapOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetMyOffer',
            grpc__pb2.GetMyOfferRequest.SerializeToString,
            grpc__pb2.GetMyOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBsqSwapOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetBsqSwapOffers',
            grpc__pb2.GetBsqSwapOffersRequest.SerializeToString,
            grpc__pb2.GetBsqSwapOffersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetOffers',
            grpc__pb2.GetOffersRequest.SerializeToString,
            grpc__pb2.GetOffersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyBsqSwapOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetMyBsqSwapOffers',
            grpc__pb2.GetBsqSwapOffersRequest.SerializeToString,
            grpc__pb2.GetMyBsqSwapOffersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMyOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/GetMyOffers',
            grpc__pb2.GetMyOffersRequest.SerializeToString,
            grpc__pb2.GetMyOffersReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateBsqSwapOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/CreateBsqSwapOffer',
            grpc__pb2.CreateBsqSwapOfferRequest.SerializeToString,
            grpc__pb2.CreateBsqSwapOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/CreateOffer',
            grpc__pb2.CreateOfferRequest.SerializeToString,
            grpc__pb2.CreateOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EditOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/EditOffer',
            grpc__pb2.EditOfferRequest.SerializeToString,
            grpc__pb2.EditOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Offers/CancelOffer',
            grpc__pb2.CancelOfferRequest.SerializeToString,
            grpc__pb2.CancelOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PaymentAccountsStub(object):
    """
    The PaymentAccounts service provides rpc methods for creating fiat and crypto currency payment accounts.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePaymentAccount = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/CreatePaymentAccount',
                request_serializer=grpc__pb2.CreatePaymentAccountRequest.SerializeToString,
                response_deserializer=grpc__pb2.CreatePaymentAccountReply.FromString,
                _registered_method=True)
        self.GetPaymentAccounts = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/GetPaymentAccounts',
                request_serializer=grpc__pb2.GetPaymentAccountsRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetPaymentAccountsReply.FromString,
                _registered_method=True)
        self.GetPaymentMethods = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/GetPaymentMethods',
                request_serializer=grpc__pb2.GetPaymentMethodsRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetPaymentMethodsReply.FromString,
                _registered_method=True)
        self.GetPaymentAccountForm = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/GetPaymentAccountForm',
                request_serializer=grpc__pb2.GetPaymentAccountFormRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetPaymentAccountFormReply.FromString,
                _registered_method=True)
        self.CreateCryptoCurrencyPaymentAccount = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/CreateCryptoCurrencyPaymentAccount',
                request_serializer=grpc__pb2.CreateCryptoCurrencyPaymentAccountRequest.SerializeToString,
                response_deserializer=grpc__pb2.CreateCryptoCurrencyPaymentAccountReply.FromString,
                _registered_method=True)
        self.GetCryptoCurrencyPaymentMethods = channel.unary_unary(
                '/io.bisq.protobuffer.PaymentAccounts/GetCryptoCurrencyPaymentMethods',
                request_serializer=grpc__pb2.GetCryptoCurrencyPaymentMethodsRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetCryptoCurrencyPaymentMethodsReply.FromString,
                _registered_method=True)


class PaymentAccountsServicer(object):
    """
    The PaymentAccounts service provides rpc methods for creating fiat and crypto currency payment accounts.
    """

    def CreatePaymentAccount(self, request, context):
        """Create a fiat payment account, providing details in a json form generated by rpc method GetPaymentAccountForm.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentAccounts(self, request, context):
        """Get list of all saved fiat payment accounts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentMethods(self, request, context):
        """Get list of all supported Bisq payment methods.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentAccountForm(self, request, context):
        """Get a json template file for a supported Bisq payment method.  Fill in the form and call rpc method CreatePaymentAccount.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCryptoCurrencyPaymentAccount(self, request, context):
        """Create a crypto currency (altcoin) payment account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCryptoCurrencyPaymentMethods(self, request, context):
        """Get list of all supported Bisq crypto currency (altcoin) payment methods.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentAccountsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePaymentAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePaymentAccount,
                    request_deserializer=grpc__pb2.CreatePaymentAccountRequest.FromString,
                    response_serializer=grpc__pb2.CreatePaymentAccountReply.SerializeToString,
            ),
            'GetPaymentAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentAccounts,
                    request_deserializer=grpc__pb2.GetPaymentAccountsRequest.FromString,
                    response_serializer=grpc__pb2.GetPaymentAccountsReply.SerializeToString,
            ),
            'GetPaymentMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentMethods,
                    request_deserializer=grpc__pb2.GetPaymentMethodsRequest.FromString,
                    response_serializer=grpc__pb2.GetPaymentMethodsReply.SerializeToString,
            ),
            'GetPaymentAccountForm': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentAccountForm,
                    request_deserializer=grpc__pb2.GetPaymentAccountFormRequest.FromString,
                    response_serializer=grpc__pb2.GetPaymentAccountFormReply.SerializeToString,
            ),
            'CreateCryptoCurrencyPaymentAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCryptoCurrencyPaymentAccount,
                    request_deserializer=grpc__pb2.CreateCryptoCurrencyPaymentAccountRequest.FromString,
                    response_serializer=grpc__pb2.CreateCryptoCurrencyPaymentAccountReply.SerializeToString,
            ),
            'GetCryptoCurrencyPaymentMethods': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCryptoCurrencyPaymentMethods,
                    request_deserializer=grpc__pb2.GetCryptoCurrencyPaymentMethodsRequest.FromString,
                    response_serializer=grpc__pb2.GetCryptoCurrencyPaymentMethodsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.PaymentAccounts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.PaymentAccounts', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentAccounts(object):
    """
    The PaymentAccounts service provides rpc methods for creating fiat and crypto currency payment accounts.
    """

    @staticmethod
    def CreatePaymentAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/CreatePaymentAccount',
            grpc__pb2.CreatePaymentAccountRequest.SerializeToString,
            grpc__pb2.CreatePaymentAccountReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPaymentAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/GetPaymentAccounts',
            grpc__pb2.GetPaymentAccountsRequest.SerializeToString,
            grpc__pb2.GetPaymentAccountsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPaymentMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/GetPaymentMethods',
            grpc__pb2.GetPaymentMethodsRequest.SerializeToString,
            grpc__pb2.GetPaymentMethodsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPaymentAccountForm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/GetPaymentAccountForm',
            grpc__pb2.GetPaymentAccountFormRequest.SerializeToString,
            grpc__pb2.GetPaymentAccountFormReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCryptoCurrencyPaymentAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/CreateCryptoCurrencyPaymentAccount',
            grpc__pb2.CreateCryptoCurrencyPaymentAccountRequest.SerializeToString,
            grpc__pb2.CreateCryptoCurrencyPaymentAccountReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCryptoCurrencyPaymentMethods(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.PaymentAccounts/GetCryptoCurrencyPaymentMethods',
            grpc__pb2.GetCryptoCurrencyPaymentMethodsRequest.SerializeToString,
            grpc__pb2.GetCryptoCurrencyPaymentMethodsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PriceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMarketPrice = channel.unary_unary(
                '/io.bisq.protobuffer.Price/GetMarketPrice',
                request_serializer=grpc__pb2.MarketPriceRequest.SerializeToString,
                response_deserializer=grpc__pb2.MarketPriceReply.FromString,
                _registered_method=True)
        self.GetAverageBsqTradePrice = channel.unary_unary(
                '/io.bisq.protobuffer.Price/GetAverageBsqTradePrice',
                request_serializer=grpc__pb2.GetAverageBsqTradePriceRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetAverageBsqTradePriceReply.FromString,
                _registered_method=True)


class PriceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMarketPrice(self, request, context):
        """Get the current market price for a crypto currency.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAverageBsqTradePrice(self, request, context):
        """Get the volume weighted average trade price for BSQ, calculated over N days.
        The response contains the average BSQ trade price in USD to 4 decimal places, and in BTC to 8 decimal places.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PriceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMarketPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketPrice,
                    request_deserializer=grpc__pb2.MarketPriceRequest.FromString,
                    response_serializer=grpc__pb2.MarketPriceReply.SerializeToString,
            ),
            'GetAverageBsqTradePrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAverageBsqTradePrice,
                    request_deserializer=grpc__pb2.GetAverageBsqTradePriceRequest.FromString,
                    response_serializer=grpc__pb2.GetAverageBsqTradePriceReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.Price', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.Price', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Price(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMarketPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Price/GetMarketPrice',
            grpc__pb2.MarketPriceRequest.SerializeToString,
            grpc__pb2.MarketPriceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAverageBsqTradePrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Price/GetAverageBsqTradePrice',
            grpc__pb2.GetAverageBsqTradePriceRequest.SerializeToString,
            grpc__pb2.GetAverageBsqTradePriceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ShutdownServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Stop = channel.unary_unary(
                '/io.bisq.protobuffer.ShutdownServer/Stop',
                request_serializer=grpc__pb2.StopRequest.SerializeToString,
                response_deserializer=grpc__pb2.StopReply.FromString,
                _registered_method=True)


class ShutdownServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Stop(self, request, context):
        """Shut down a local Bisq daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShutdownServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=grpc__pb2.StopRequest.FromString,
                    response_serializer=grpc__pb2.StopReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.ShutdownServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.ShutdownServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ShutdownServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.ShutdownServer/Stop',
            grpc__pb2.StopRequest.SerializeToString,
            grpc__pb2.StopReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TradesStub(object):
    """
    The Trades service provides rpc methods for taking, executing, and listing trades.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrade = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/GetTrade',
                request_serializer=grpc__pb2.GetTradeRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetTradeReply.FromString,
                _registered_method=True)
        self.GetTrades = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/GetTrades',
                request_serializer=grpc__pb2.GetTradesRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetTradesReply.FromString,
                _registered_method=True)
        self.TakeOffer = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/TakeOffer',
                request_serializer=grpc__pb2.TakeOfferRequest.SerializeToString,
                response_deserializer=grpc__pb2.TakeOfferReply.FromString,
                _registered_method=True)
        self.ConfirmPaymentStarted = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/ConfirmPaymentStarted',
                request_serializer=grpc__pb2.ConfirmPaymentStartedRequest.SerializeToString,
                response_deserializer=grpc__pb2.ConfirmPaymentStartedReply.FromString,
                _registered_method=True)
        self.ConfirmPaymentStartedXmr = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/ConfirmPaymentStartedXmr',
                request_serializer=grpc__pb2.ConfirmPaymentStartedXmrRequest.SerializeToString,
                response_deserializer=grpc__pb2.ConfirmPaymentStartedReply.FromString,
                _registered_method=True)
        self.ConfirmPaymentReceived = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/ConfirmPaymentReceived',
                request_serializer=grpc__pb2.ConfirmPaymentReceivedRequest.SerializeToString,
                response_deserializer=grpc__pb2.ConfirmPaymentReceivedReply.FromString,
                _registered_method=True)
        self.CloseTrade = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/CloseTrade',
                request_serializer=grpc__pb2.CloseTradeRequest.SerializeToString,
                response_deserializer=grpc__pb2.CloseTradeReply.FromString,
                _registered_method=True)
        self.FailTrade = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/FailTrade',
                request_serializer=grpc__pb2.FailTradeRequest.SerializeToString,
                response_deserializer=grpc__pb2.FailTradeReply.FromString,
                _registered_method=True)
        self.UnFailTrade = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/UnFailTrade',
                request_serializer=grpc__pb2.UnFailTradeRequest.SerializeToString,
                response_deserializer=grpc__pb2.UnFailTradeReply.FromString,
                _registered_method=True)
        self.WithdrawFunds = channel.unary_unary(
                '/io.bisq.protobuffer.Trades/WithdrawFunds',
                request_serializer=grpc__pb2.WithdrawFundsRequest.SerializeToString,
                response_deserializer=grpc__pb2.WithdrawFundsReply.FromString,
                _registered_method=True)


class TradesServicer(object):
    """
    The Trades service provides rpc methods for taking, executing, and listing trades.
    """

    def GetTrade(self, request, context):
        """Get a currently open trade.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrades(self, request, context):
        """Get currently open, or historical trades (closed or failed).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeOffer(self, request, context):
        """Take an available offer.  Your node must have a payment account with the same payment method as
        the offer's payment method, e.g., NATIONAL_BANK, SEPA, SWIFT, etc.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPaymentStarted(self, request, context):
        """Send a 'payment started' message to a trading peer (the BTC seller).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPaymentStartedXmr(self, request, context):
        """Send a 'payment started' message with optional XMR specific parameters to a trading peer (the BTC seller).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmPaymentReceived(self, request, context):
        """Send a 'payment received' message to a trading peer (the BTC buyer).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseTrade(self, request, context):
        """Close a completed trade;  move it to trade history.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FailTrade(self, request, context):
        """Fail an open trade.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnFailTrade(self, request, context):
        """Unfail a failed trade.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawFunds(self, request, context):
        """Withdraw trade proceeds to an external bitcoin wallet address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrade,
                    request_deserializer=grpc__pb2.GetTradeRequest.FromString,
                    response_serializer=grpc__pb2.GetTradeReply.SerializeToString,
            ),
            'GetTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrades,
                    request_deserializer=grpc__pb2.GetTradesRequest.FromString,
                    response_serializer=grpc__pb2.GetTradesReply.SerializeToString,
            ),
            'TakeOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeOffer,
                    request_deserializer=grpc__pb2.TakeOfferRequest.FromString,
                    response_serializer=grpc__pb2.TakeOfferReply.SerializeToString,
            ),
            'ConfirmPaymentStarted': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPaymentStarted,
                    request_deserializer=grpc__pb2.ConfirmPaymentStartedRequest.FromString,
                    response_serializer=grpc__pb2.ConfirmPaymentStartedReply.SerializeToString,
            ),
            'ConfirmPaymentStartedXmr': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPaymentStartedXmr,
                    request_deserializer=grpc__pb2.ConfirmPaymentStartedXmrRequest.FromString,
                    response_serializer=grpc__pb2.ConfirmPaymentStartedReply.SerializeToString,
            ),
            'ConfirmPaymentReceived': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmPaymentReceived,
                    request_deserializer=grpc__pb2.ConfirmPaymentReceivedRequest.FromString,
                    response_serializer=grpc__pb2.ConfirmPaymentReceivedReply.SerializeToString,
            ),
            'CloseTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseTrade,
                    request_deserializer=grpc__pb2.CloseTradeRequest.FromString,
                    response_serializer=grpc__pb2.CloseTradeReply.SerializeToString,
            ),
            'FailTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.FailTrade,
                    request_deserializer=grpc__pb2.FailTradeRequest.FromString,
                    response_serializer=grpc__pb2.FailTradeReply.SerializeToString,
            ),
            'UnFailTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.UnFailTrade,
                    request_deserializer=grpc__pb2.UnFailTradeRequest.FromString,
                    response_serializer=grpc__pb2.UnFailTradeReply.SerializeToString,
            ),
            'WithdrawFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawFunds,
                    request_deserializer=grpc__pb2.WithdrawFundsRequest.FromString,
                    response_serializer=grpc__pb2.WithdrawFundsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.Trades', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.Trades', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Trades(object):
    """
    The Trades service provides rpc methods for taking, executing, and listing trades.
    """

    @staticmethod
    def GetTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/GetTrade',
            grpc__pb2.GetTradeRequest.SerializeToString,
            grpc__pb2.GetTradeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/GetTrades',
            grpc__pb2.GetTradesRequest.SerializeToString,
            grpc__pb2.GetTradesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TakeOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/TakeOffer',
            grpc__pb2.TakeOfferRequest.SerializeToString,
            grpc__pb2.TakeOfferReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmPaymentStarted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/ConfirmPaymentStarted',
            grpc__pb2.ConfirmPaymentStartedRequest.SerializeToString,
            grpc__pb2.ConfirmPaymentStartedReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmPaymentStartedXmr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/ConfirmPaymentStartedXmr',
            grpc__pb2.ConfirmPaymentStartedXmrRequest.SerializeToString,
            grpc__pb2.ConfirmPaymentStartedReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfirmPaymentReceived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/ConfirmPaymentReceived',
            grpc__pb2.ConfirmPaymentReceivedRequest.SerializeToString,
            grpc__pb2.ConfirmPaymentReceivedReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/CloseTrade',
            grpc__pb2.CloseTradeRequest.SerializeToString,
            grpc__pb2.CloseTradeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FailTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/FailTrade',
            grpc__pb2.FailTradeRequest.SerializeToString,
            grpc__pb2.FailTradeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnFailTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/UnFailTrade',
            grpc__pb2.UnFailTradeRequest.SerializeToString,
            grpc__pb2.UnFailTradeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WithdrawFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Trades/WithdrawFunds',
            grpc__pb2.WithdrawFundsRequest.SerializeToString,
            grpc__pb2.WithdrawFundsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WalletsStub(object):
    """
    The Wallets service provides rpc methods for basic wallet operations such as checking balances,
    sending BTC or BSQ to external wallets, checking transaction fee rates, setting or unsetting
    an encryption password on a a wallet, and unlocking / locking an encrypted wallet.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNetwork = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetNetwork',
                request_serializer=grpc__pb2.GetNetworkRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetNetworkReply.FromString,
                _registered_method=True)
        self.GetDaoStatus = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetDaoStatus',
                request_serializer=grpc__pb2.GetDaoStatusRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetDaoStatusReply.FromString,
                _registered_method=True)
        self.GetBalances = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetBalances',
                request_serializer=grpc__pb2.GetBalancesRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetBalancesReply.FromString,
                _registered_method=True)
        self.GetAddressBalance = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetAddressBalance',
                request_serializer=grpc__pb2.GetAddressBalanceRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetAddressBalanceReply.FromString,
                _registered_method=True)
        self.GetUnusedBsqAddress = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetUnusedBsqAddress',
                request_serializer=grpc__pb2.GetUnusedBsqAddressRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetUnusedBsqAddressReply.FromString,
                _registered_method=True)
        self.SendBsq = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/SendBsq',
                request_serializer=grpc__pb2.SendBsqRequest.SerializeToString,
                response_deserializer=grpc__pb2.SendBsqReply.FromString,
                _registered_method=True)
        self.SendBtc = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/SendBtc',
                request_serializer=grpc__pb2.SendBtcRequest.SerializeToString,
                response_deserializer=grpc__pb2.SendBtcReply.FromString,
                _registered_method=True)
        self.VerifyBsqSentToAddress = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/VerifyBsqSentToAddress',
                request_serializer=grpc__pb2.VerifyBsqSentToAddressRequest.SerializeToString,
                response_deserializer=grpc__pb2.VerifyBsqSentToAddressReply.FromString,
                _registered_method=True)
        self.GetTxFeeRate = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetTxFeeRate',
                request_serializer=grpc__pb2.GetTxFeeRateRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetTxFeeRateReply.FromString,
                _registered_method=True)
        self.SetTxFeeRatePreference = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/SetTxFeeRatePreference',
                request_serializer=grpc__pb2.SetTxFeeRatePreferenceRequest.SerializeToString,
                response_deserializer=grpc__pb2.SetTxFeeRatePreferenceReply.FromString,
                _registered_method=True)
        self.UnsetTxFeeRatePreference = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/UnsetTxFeeRatePreference',
                request_serializer=grpc__pb2.UnsetTxFeeRatePreferenceRequest.SerializeToString,
                response_deserializer=grpc__pb2.UnsetTxFeeRatePreferenceReply.FromString,
                _registered_method=True)
        self.GetTransactions = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetTransactions',
                request_serializer=grpc__pb2.GetTransactionsRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetTransactionsReply.FromString,
                _registered_method=True)
        self.GetTransaction = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetTransaction',
                request_serializer=grpc__pb2.GetTransactionRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetTransactionReply.FromString,
                _registered_method=True)
        self.GetFundingAddresses = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/GetFundingAddresses',
                request_serializer=grpc__pb2.GetFundingAddressesRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetFundingAddressesReply.FromString,
                _registered_method=True)
        self.SetWalletPassword = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/SetWalletPassword',
                request_serializer=grpc__pb2.SetWalletPasswordRequest.SerializeToString,
                response_deserializer=grpc__pb2.SetWalletPasswordReply.FromString,
                _registered_method=True)
        self.RemoveWalletPassword = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/RemoveWalletPassword',
                request_serializer=grpc__pb2.RemoveWalletPasswordRequest.SerializeToString,
                response_deserializer=grpc__pb2.RemoveWalletPasswordReply.FromString,
                _registered_method=True)
        self.LockWallet = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/LockWallet',
                request_serializer=grpc__pb2.LockWalletRequest.SerializeToString,
                response_deserializer=grpc__pb2.LockWalletReply.FromString,
                _registered_method=True)
        self.UnlockWallet = channel.unary_unary(
                '/io.bisq.protobuffer.Wallets/UnlockWallet',
                request_serializer=grpc__pb2.UnlockWalletRequest.SerializeToString,
                response_deserializer=grpc__pb2.UnlockWalletReply.FromString,
                _registered_method=True)


class WalletsServicer(object):
    """
    The Wallets service provides rpc methods for basic wallet operations such as checking balances,
    sending BTC or BSQ to external wallets, checking transaction fee rates, setting or unsetting
    an encryption password on a a wallet, and unlocking / locking an encrypted wallet.
    """

    def GetNetwork(self, request, context):
        """Get the name of the BTC / BSQ network (mainnet, testnet3, or regtest).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDaoStatus(self, request, context):
        """Get status of the DAO.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalances(self, request, context):
        """Get the Bisq wallet's current BSQ and BTC balances.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddressBalance(self, request, context):
        """Get BTC balance for a wallet address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnusedBsqAddress(self, request, context):
        """Get an unused BSQ wallet address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBsq(self, request, context):
        """Send an amount of BSQ to an external address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBtc(self, request, context):
        """Send an amount of BTC to an external address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyBsqSentToAddress(self, request, context):
        """Verify a specific amount of BSQ was received by a BSQ wallet address.
        This is a problematic way of verifying BSQ payment has been received for a v1 trade protocol BSQ-BTC trade,
        which has been solved by the introduction of BSQ swap trades, which use a different, unused BSQ address for each trade.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTxFeeRate(self, request, context):
        """Get the Bisq network's most recently available bitcoin miner transaction fee rate, or custom fee rate if set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTxFeeRatePreference(self, request, context):
        """Set the Bisq daemon's custom bitcoin miner transaction fee rate, in sats/byte.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnsetTxFeeRatePreference(self, request, context):
        """Remove the custom bitcoin miner transaction fee rate;  revert to the Bisq network's bitcoin miner transaction fee rate.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactions(self, request, context):
        """Get a bitcoin transactions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Get a bitcoin transaction summary.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFundingAddresses(self, request, context):
        """Get all bitcoin receiving addresses in the Bisq BTC wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWalletPassword(self, request, context):
        """Set the Bisq wallet's encryption password.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWalletPassword(self, request, context):
        """Remove the encryption password from the Bisq wallet.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockWallet(self, request, context):
        """Lock an encrypted Bisq wallet before the UnlockWallet rpc method's timeout period has expired.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockWallet(self, request, context):
        """Unlock a Bisq encrypted wallet before calling wallet sensitive rpc methods: CreateOffer, TakeOffer, GetBalances,
        etc., for a timeout period in seconds.  An unlocked wallet will automatically lock itself after the timeout
        period has expired, or a LockWallet request has been made, whichever is first.  An unlocked wallet's timeout
        setting can be overridden by subsequent UnlockWallet calls.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetNetwork': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetwork,
                    request_deserializer=grpc__pb2.GetNetworkRequest.FromString,
                    response_serializer=grpc__pb2.GetNetworkReply.SerializeToString,
            ),
            'GetDaoStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDaoStatus,
                    request_deserializer=grpc__pb2.GetDaoStatusRequest.FromString,
                    response_serializer=grpc__pb2.GetDaoStatusReply.SerializeToString,
            ),
            'GetBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalances,
                    request_deserializer=grpc__pb2.GetBalancesRequest.FromString,
                    response_serializer=grpc__pb2.GetBalancesReply.SerializeToString,
            ),
            'GetAddressBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddressBalance,
                    request_deserializer=grpc__pb2.GetAddressBalanceRequest.FromString,
                    response_serializer=grpc__pb2.GetAddressBalanceReply.SerializeToString,
            ),
            'GetUnusedBsqAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnusedBsqAddress,
                    request_deserializer=grpc__pb2.GetUnusedBsqAddressRequest.FromString,
                    response_serializer=grpc__pb2.GetUnusedBsqAddressReply.SerializeToString,
            ),
            'SendBsq': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBsq,
                    request_deserializer=grpc__pb2.SendBsqRequest.FromString,
                    response_serializer=grpc__pb2.SendBsqReply.SerializeToString,
            ),
            'SendBtc': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBtc,
                    request_deserializer=grpc__pb2.SendBtcRequest.FromString,
                    response_serializer=grpc__pb2.SendBtcReply.SerializeToString,
            ),
            'VerifyBsqSentToAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyBsqSentToAddress,
                    request_deserializer=grpc__pb2.VerifyBsqSentToAddressRequest.FromString,
                    response_serializer=grpc__pb2.VerifyBsqSentToAddressReply.SerializeToString,
            ),
            'GetTxFeeRate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTxFeeRate,
                    request_deserializer=grpc__pb2.GetTxFeeRateRequest.FromString,
                    response_serializer=grpc__pb2.GetTxFeeRateReply.SerializeToString,
            ),
            'SetTxFeeRatePreference': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTxFeeRatePreference,
                    request_deserializer=grpc__pb2.SetTxFeeRatePreferenceRequest.FromString,
                    response_serializer=grpc__pb2.SetTxFeeRatePreferenceReply.SerializeToString,
            ),
            'UnsetTxFeeRatePreference': grpc.unary_unary_rpc_method_handler(
                    servicer.UnsetTxFeeRatePreference,
                    request_deserializer=grpc__pb2.UnsetTxFeeRatePreferenceRequest.FromString,
                    response_serializer=grpc__pb2.UnsetTxFeeRatePreferenceReply.SerializeToString,
            ),
            'GetTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactions,
                    request_deserializer=grpc__pb2.GetTransactionsRequest.FromString,
                    response_serializer=grpc__pb2.GetTransactionsReply.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=grpc__pb2.GetTransactionRequest.FromString,
                    response_serializer=grpc__pb2.GetTransactionReply.SerializeToString,
            ),
            'GetFundingAddresses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFundingAddresses,
                    request_deserializer=grpc__pb2.GetFundingAddressesRequest.FromString,
                    response_serializer=grpc__pb2.GetFundingAddressesReply.SerializeToString,
            ),
            'SetWalletPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWalletPassword,
                    request_deserializer=grpc__pb2.SetWalletPasswordRequest.FromString,
                    response_serializer=grpc__pb2.SetWalletPasswordReply.SerializeToString,
            ),
            'RemoveWalletPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWalletPassword,
                    request_deserializer=grpc__pb2.RemoveWalletPasswordRequest.FromString,
                    response_serializer=grpc__pb2.RemoveWalletPasswordReply.SerializeToString,
            ),
            'LockWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.LockWallet,
                    request_deserializer=grpc__pb2.LockWalletRequest.FromString,
                    response_serializer=grpc__pb2.LockWalletReply.SerializeToString,
            ),
            'UnlockWallet': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockWallet,
                    request_deserializer=grpc__pb2.UnlockWalletRequest.FromString,
                    response_serializer=grpc__pb2.UnlockWalletReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.Wallets', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.Wallets', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Wallets(object):
    """
    The Wallets service provides rpc methods for basic wallet operations such as checking balances,
    sending BTC or BSQ to external wallets, checking transaction fee rates, setting or unsetting
    an encryption password on a a wallet, and unlocking / locking an encrypted wallet.
    """

    @staticmethod
    def GetNetwork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetNetwork',
            grpc__pb2.GetNetworkRequest.SerializeToString,
            grpc__pb2.GetNetworkReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDaoStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetDaoStatus',
            grpc__pb2.GetDaoStatusRequest.SerializeToString,
            grpc__pb2.GetDaoStatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetBalances',
            grpc__pb2.GetBalancesRequest.SerializeToString,
            grpc__pb2.GetBalancesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAddressBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetAddressBalance',
            grpc__pb2.GetAddressBalanceRequest.SerializeToString,
            grpc__pb2.GetAddressBalanceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnusedBsqAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetUnusedBsqAddress',
            grpc__pb2.GetUnusedBsqAddressRequest.SerializeToString,
            grpc__pb2.GetUnusedBsqAddressReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendBsq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/SendBsq',
            grpc__pb2.SendBsqRequest.SerializeToString,
            grpc__pb2.SendBsqReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendBtc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/SendBtc',
            grpc__pb2.SendBtcRequest.SerializeToString,
            grpc__pb2.SendBtcReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyBsqSentToAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/VerifyBsqSentToAddress',
            grpc__pb2.VerifyBsqSentToAddressRequest.SerializeToString,
            grpc__pb2.VerifyBsqSentToAddressReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTxFeeRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetTxFeeRate',
            grpc__pb2.GetTxFeeRateRequest.SerializeToString,
            grpc__pb2.GetTxFeeRateReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTxFeeRatePreference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/SetTxFeeRatePreference',
            grpc__pb2.SetTxFeeRatePreferenceRequest.SerializeToString,
            grpc__pb2.SetTxFeeRatePreferenceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnsetTxFeeRatePreference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/UnsetTxFeeRatePreference',
            grpc__pb2.UnsetTxFeeRatePreferenceRequest.SerializeToString,
            grpc__pb2.UnsetTxFeeRatePreferenceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetTransactions',
            grpc__pb2.GetTransactionsRequest.SerializeToString,
            grpc__pb2.GetTransactionsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetTransaction',
            grpc__pb2.GetTransactionRequest.SerializeToString,
            grpc__pb2.GetTransactionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFundingAddresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/GetFundingAddresses',
            grpc__pb2.GetFundingAddressesRequest.SerializeToString,
            grpc__pb2.GetFundingAddressesReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWalletPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/SetWalletPassword',
            grpc__pb2.SetWalletPasswordRequest.SerializeToString,
            grpc__pb2.SetWalletPasswordReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveWalletPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/RemoveWalletPassword',
            grpc__pb2.RemoveWalletPasswordRequest.SerializeToString,
            grpc__pb2.RemoveWalletPasswordReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LockWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/LockWallet',
            grpc__pb2.LockWalletRequest.SerializeToString,
            grpc__pb2.LockWalletReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnlockWallet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.Wallets/UnlockWallet',
            grpc__pb2.UnlockWalletRequest.SerializeToString,
            grpc__pb2.UnlockWalletReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GetVersionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVersion = channel.unary_unary(
                '/io.bisq.protobuffer.GetVersion/GetVersion',
                request_serializer=grpc__pb2.GetVersionRequest.SerializeToString,
                response_deserializer=grpc__pb2.GetVersionReply.FromString,
                _registered_method=True)


class GetVersionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetVersion(self, request, context):
        """Get the current Bisq version number.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetVersionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=grpc__pb2.GetVersionRequest.FromString,
                    response_serializer=grpc__pb2.GetVersionReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.bisq.protobuffer.GetVersion', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('io.bisq.protobuffer.GetVersion', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GetVersion(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/io.bisq.protobuffer.GetVersion/GetVersion',
            grpc__pb2.GetVersionRequest.SerializeToString,
            grpc__pb2.GetVersionReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
